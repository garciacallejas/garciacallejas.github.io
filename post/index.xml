<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on DGC</title>
    <link>https://garciacallejas.github.io/post/</link>
    <description>Recent content in Posts on DGC</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Jun 2019 21:13:14 -0500</lastBuildDate>
    
	    <atom:link href="https://garciacallejas.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working setup</title>
      <link>https://garciacallejas.github.io/post/2019-06-27-test/</link>
      <pubDate>Thu, 27 Jun 2019 21:13:14 -0500</pubDate>
      
      <guid>https://garciacallejas.github.io/post/2019-06-27-test/</guid>
      <description>


&lt;p&gt;Although my career is not that long, I like to experiment with different workflows and adapt them to my needs and likings. I have written papers in Word, Latex, google docs, and Markdown, while I have produced and tweaked figures with R, Gimp, Inkscape, the yEd diagram editor, and probably some other tools that I don’t remember anymore. I will quickly summarize what, for me, is the best workflow for a complete project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 - Setting up a code/data project&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set up a github repository for the code and, if it applies, for the raw data. Note that ideally data may be stored externally, e.g. in Zenodo or similar long-term archives.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Link that repository to Rstudio. I prefer creating first the github repo and then cheking it out to Rstudio by creating a project from it. Keeping the github repo updated is particularly important for me since I have, right now, 3 computers in which I eventually work (!). Yeah, the office one, the big one at home, and a laptop. Since I use https to connect to github, I found the following totally life-saving, in order not to write username and password for every connection: &lt;code&gt;git config --global credential.helper &#39;cache --timeout=10000000&#39;&lt;/code&gt; will store your info for the time you specify.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I have gone through seven hells and back fighting the code and data, and have produced results that I can write about (figures in ggplot, as much as possible), I so far have not used Rmarkdown to generate reports. Probably because my R scripts are too computationally expensive usually, and do not fit well in that workflow. So I switch to a proper text editor (tbh, I also prefer &lt;em&gt;not&lt;/em&gt; to write in Rstudio, but that’s personal taste).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2 - Writing setup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Right now, my needs are for a setup that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allows me to switch back and forth to word documents if co-authors need it&lt;/li&gt;
&lt;li&gt;Easily renders quality math&lt;/li&gt;
&lt;li&gt;Automatically handles references, etc.&lt;/li&gt;
&lt;li&gt;Integrates github&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Latex is, at the end of the day, a fantastic typesetting language, but for a standard paper is overkill. Standard markdown is, right now, what I think provides the best balance between clarity, ease of use, and the above requirements, although surprisingly I have found it harder to find info about bare markdown than about, say, the Rmarkdown flavour.&lt;/p&gt;
&lt;p&gt;In a .md document, figures are included as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;![caption \label{Fig1}](path/Fig_1.png){width=100%}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and can be properly referenced in-line. Citations are included via the &lt;code&gt;[@citation-key]&lt;/code&gt; command. For working with the .md files, I use Atom. Atom is an impressive editor, minimalistic, totally customizable, open… and it neatly integrates git and github. For auto-completing the citation keys of my bib file in Atom, the &lt;code&gt;autocomplete-bibtex&lt;/code&gt; package works perfect. I, however, do not like the rest of the text to be auto-completed, so in the core options for autocomplete, i.e. the settings of &lt;code&gt;autocomplete-plus&lt;/code&gt;, I set the minimum word length to a length that will prevent autocompletion to be switched on, say 100 characters. This setting does not affect the bibtex autocomplete.&lt;/p&gt;
&lt;p&gt;So, since I usually keep the writing separated from the code, I create another github repo for the markdown documents, and I clone it directly via Atom. This is done via the command palette (&lt;code&gt;ctrl+shift+p&lt;/code&gt;) typing &lt;code&gt;github:clone&lt;/code&gt; (once the github package is installed). Afterwards, when I need to convert markdown to word or pdf, I can call pandoc from a shell within Atom, by installing the package “platformio-ide-terminal”. The pandoc call is of the form&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~$ pandoc -s -o file.pdf file.md --bibliography /path/to/library.bib --csl /path/to/style.csl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If using Rmarkdown, there are even more options, like the &lt;code&gt;redoc&lt;/code&gt; R package.&lt;/p&gt;
&lt;p&gt;This workflow is fantastic for projects in which I am the main author and only share more or less polished versions of the document, which I then integrate back in the markdown doc. I love the aesthetics of Atom and its simplicity. However, right now, for more collaborative projects, I simply use google docs, and I have to admit it’s fine enough, as it even has Zotero integration.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
